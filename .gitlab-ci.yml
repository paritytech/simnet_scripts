stages:
  - build
  - test
  - update-container-image-latest


variables:                         &global-vars
  FF_GITLAB_REGISTRY_HELPER_IMAGE:   'true'

build-simnetscripts-image-and-push-temporarly-in-paritypr:
  variables:
    <<:                            *global-vars
  image:                           quay.io/buildah/stable
  tags:
    - parity-simnetscripts-build
  variables:
    # random name to replace simnetscripts until we will have private docker repo 
    CONTAINER_IMAGE:               "paritypr/simnetscripts"
    CONTAINER_IMAGE_TAG:           "${CI_COMMIT_SHORT_SHA}" 
  stage:                           build
  before_script:
    - echo "Image that will be built ${CONTAINER_IMAGE}:${CONTAINER_IMAGE_TAG}"
    - test "${DOCKER_SIMNET_USER}" -a "${DOCKER_SIMNET_PASS}" ||
        ( echo "No docker credentials provided"; exit 1 )
  script:
    - |
      echo "LOG INFO building container ${CONTAINER_IMAGE}:${CONTAINER_IMAGE_TAG}"
      echo "${DOCKER_SIMNET_PASS}" \
           | buildah login --username "${DOCKER_SIMNET_USER}" --password-stdin docker.io
      whoami
      buildah info
      df -h | grep /var/lib/containers
      echo "${GITLAB_DEPLOY_TOKEN}" > .GITLAB_DEPLOY_TOKEN
      buildah bud  \
        --layers=true  \
        --cache-from  "${CONTAINER_IMAGE}:${CONTAINER_IMAGE_TAG}" \
        --tag         "${CONTAINER_IMAGE}:${CONTAINER_IMAGE_TAG}" \

      echo "LOG INFO image ${CONTAINER_IMAGE}:${CONTAINER_IMAGE_TAG} built successfully"
      echo "$DOCKER_SIMNET_PASS" \
           | buildah  login --username "$DOCKER_SIMNET_USER" --password-stdin docker.io
      buildah push --format=v2s2 "$CONTAINER_IMAGE:$CONTAINER_IMAGE_TAG"
      echo "LOG INFO ${CONTAINER_IMAGE}:${CONTAINER_IMAGE_TAG} pushed successfully"
      echo "LOG check if need to cleanup dangling images"
      df -h | grep /var/lib/containers
      CACHE_USE_PERCENT="$(df -h | grep -vE '/var/lib/containers/.*' | grep /var/lib/containers | awk '{print $5}' | sed 's/%//g')"
      test -n "${CACHE_USE_PERCENT}" \
              || ( echo "This variable can't be emtpy" ; exit 1 )
      if test "${CACHE_USE_PERCENT}" -ge 80 ; then 
        echo "LOG INFO need to cleanup cache, value: ${CACHE_USE_PERCENT}"
        time buildah rmi -f $(buildah images -q -f "dangling=true")
      else 
        echo "LOG INFO No Cleanup needed this time value: ${CACHE_USE_PERCENT}"
      fi
  retry: 1
  after_script:
    - buildah logout docker.io

test-current-latest-container-image:
  stage:                           build
  tags:
    - parity-simnetscripts
  variables:
    IMAGE_UNDER_TEST:              "paritytech/simnetscripts"
    IMAGE_UNDER_TEST_TAG:          "latest"
    PARACHAINS_IMAGE:              "docker.io/paritypr/synth-wave"
    PARACHAINS_IMAGE_TAG:          "master"
    COLLATOR_IMAGE:                "docker.io/paritypr/colander"
    COLLATOR_IMAGE_TAG:            "master"
  image:                           "${IMAGE_UNDER_TEST}:${IMAGE_UNDER_TEST_TAG}"
  interruptible:                    true
  before_script:
    - echo "'${CI_PIPELINE_SOURCE}' type trigger."
    - echo "Image under test '${IMAGE_UNDER_TEST}:${IMAGE_UNDER_TEST_TAG}'"
    - echo "Parachians image '${PARACHAINS_IMAGE}:${PARACHAINS_IMAGE_TAG}'."
    - echo "Collator image   '${COLLATOR_IMAGE}:${COLLATOR_IMAGE_TAG}'."
    - test "$DOCKER_SIMNET_USER" -a "$DOCKER_SIMNET_PASS" ||
        ( echo "No docker credentials provided"; exit 1 )
  script:
    - cd /home/nonroot/gurke/scripts/
    - ./run-test-environment-manager.sh  
        --test-script=../../simnet/testing/parachains/run_tests.sh 
        --image="${PARACHAINS_IMAGE}:${PARACHAINS_IMAGE_TAG}" 
        --image-2="${COLLATOR_IMAGE}:${COLLATOR_IMAGE_TAG}"

test-pr-container-image:          
  tags:
    - parity-simnetscripts
  stage:                           test
  needs:
    job:                           build-simnetscripts-image-and-push-temporarly-in-paritypr
  interruptible:                   true
  variables:
    IMAGE_UNDER_TEST:              "paritypr/simnetscripts"
    IMAGE_UNDER_TEST_TAG:          "${CI_COMMIT_SHORT_SHA}"
    PARACHAINS_IMAGE:              "docker.io/paritypr/synth-wave"
    PARACHAINS_IMAGE_TAG:          "master"
    COLLATOR_IMAGE:                "docker.io/paritypr/colander"
    COLLATOR_IMAGE_TAG:            "master"
  image:                           "${IMAGE_UNDER_TEST}:${IMAGE_UNDER_TEST_TAG}"
  before_script:
    - echo "Trigger type     ${CI_PIPELINE_SOURCE}'"
    - echo "Image under test '${IMAGE_UNDER_TEST}:${IMAGE_UNDER_TEST_TAG}"
    - echo "Parachians image '${PARACHAINS_IMAGE}:${PARACHAINS_IMAGE_TAG}'."
    - echo "Collator image   '${COLLATOR_IMAGE}:${COLLATOR_IMAGE_TAG}'."
    - test "${DOCKER_SIMNET_USER}" -a "${DOCKER_SIMNET_PASS}" ||
        ( echo "No docker credentials provided"; exit 1 )
  script:
    - cd /home/nonroot/gurke/scripts/
    - ./run-test-environment-manager.sh  
        --test-script=../../simnet/testing/parachains/run_tests.sh 
        --image="${PARACHAINS_IMAGE}:${PARACHAINS_IMAGE_TAG}" 
        --image-2="${COLLATOR_IMAGE}:${COLLATOR_IMAGE_TAG}"

update-latest-container-image:
  variables:
    <<:                            *global-vars
    UPSTREAM_BUILD_TRIGGER:        ${BUILD_SIMNETSCRIPTS}
    PR_IMAGE:                      "paritypr/simnetscripts"
    PR_IMAGE_TAG:                  "${CI_COMMIT_SHORT_SHA}"           
    PUSH_IMAGE:                    "paritytech/simnetscripts"
    PUSH_IMAGE_TAG:                "latest"
  stage:                            update-container-image-latest
  needs:
    - job:                          test-pr-container-image
  image:                            quay.io/buildah/stable
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
    - if: '$UPSTREAM_BUILD_TRIGGER == "true"'
  tags:
    - parity-simnetscripts
  before_script:
    - test "${Docker_Hub_User_Parity}" -a "${Docker_Hub_Pass_Parity}" ||
        ( echo "no docker credentials provided"; exit 1 )
  script:
    - echo "LOG INFO pushing latest image  ${PUSH_IMAGE}:${PUSH_IMAGE_TAG}"
    - echo "${Docker_Hub_Pass_Parity}" |
        buildah login --username "${Docker_Hub_User_Parity}" --password-stdin docker.io
    - buildah info
    - 'buildah pull "${PR_IMAGE}:${PR_IMAGE_TAG}"'
    - 'buildah tag "${PR_IMAGE}:${PR_IMAGE_TAG}" "${PUSH_IMAGE}:${PUSH_IMAGE_TAG}"'
    - 'buildah push --format=v2s2 "${PUSH_IMAGE}:${PUSH_IMAGE_TAG}"'
  after_script:
    - buildah logout docker.io
