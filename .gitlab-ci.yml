stages:
  - build

variables:                         &global-vars
  FF_GITLAB_REGISTRY_HELPER_IMAGE:   'true'

build-simnetscripts-image-and-push-temporarly-in-paritypr:
  variables:
    <<:                            *global-vars
  image:                           quay.io/podman/stable
  tags:
    - parity-simnetscripts-build
  variables:
    # random name to replace simnetscripts until we will have private docker repo 
    CONTAINER_IMAGE:               paritypr/simnetscripts
  stage:                           build
  before_script:
    - test "$DOCKER_SIMNET_USER" -a "$DOCKER_SIMNET_PASS" ||
        ( echo "No docker credentials provided"; exit 1 )
  script:
    - |
      echo "LOG INFO step 4 build container image $CONTAINER_IMAGE:$CI_COMMIT_SHORT_SHA"
      echo "$DOCKER_SIMNET_PASS" \
           | podman login --username "$DOCKER_SIMNET_USER" --password-stdin docker.io
      whoami
      podman info
      df -h | grep /var/lib/containers
      time podman run \
        --volume .:/build  \
        --volume /var/lib/containers/:/var/lib/containers \
        --device /dev/fuse \
        --privileged   \
        quay.io/buildah/stable \
            buildah bud  \
              --layers=true  \
              --cache-from  "$CONTAINER_IMAGE:$CI_COMMIT_SHORT_SHA" \
              --tag         "$CONTAINER_IMAGE:$CI_COMMIT_SHORT_SHA" \
              /build 
      echo "LOG INFO step 5 image $CONTAINER_IMAGE:$CI_COMMIT_SHORT_SHA built successfully"
      echo "$DOCKER_SIMNET_PASS" \
           | podman  login --username "$DOCKER_SIMNET_USER" --password-stdin docker.io

      podman push --format=v2s2 "$CONTAINER_IMAGE:$CI_COMMIT_SHORT_SHA"
      echo "LOG INFO step 6 image $CONTAINER_IMAGE:$CI_COMMIT_SHORT_SHA pushed successfully"

      echo "LOG check if need to cleanup dangling images"
      df -h | grep /var/lib/containers
      CACHE_USE_PERCENT="$(df -h | grep -vE '/var/lib/containers/.*' | grep /var/lib/containers | awk '{print $5}' | sed 's/%//g')"
      test -n "$CACHE_USE_PERCENT" \
              || ( echo "This variable can't be emtpy" ; exit 1 )

      if test "$CACHE_USE_PERCENT" -ge 80 ; then 
        echo "LOG INFO need to cleanup cache, value: $CACHE_USE_PERCENT"
        time podman rmi -f $(podman images -q -f "dangling=true")
      else 
        echo "LOG INFO No Cleanup needed this time value: $CACHE_USE_PERCENT"
      fi
  retry: 1
  after_script:
    - podman logout docker.io

